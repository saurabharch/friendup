

The READ method explained.


1. Loading a file in the Friend Workspace, runs the "read" DOS command using 

    HTTP (or web sockets, if you're using that....)


Method:POST /system.library/file/read


Form data:

sessionid: e4ba0ba824942e78fb0e8d0863bd0187fc8f8106

path: Storage:Documents/Testing_For_Author.html

mode: r


2. This is handled by Friend Core, which finds the Storage drive, which type it is

and which handler it is using. In our case, Storage: is a SQLDrive which uses 

the phpfs handler. The SQLDrive gets the "path" and "mode" vars passed after 

they have been sanitized for exploiting data.


3. phpfs runs the command FileOpen() with the mode from the "Form data". In this

case it is "r", which means to read in text mode. "read" understands these 

modes:


 "r" - text mode

 "rb" - binary mode

 "rs" - binary stream mode


FileOpen() further executes the php based files module, which opens up the 

correct PHP based dos driver door code. The dormant command "read" is executed

with php-cli, and the result is piped back to Friend Core.

After having executed FileOpen(), the file is read into a buffer and closed with

FileClose(), which allows outputting the data to the browser..


4. This will explain what happens when the php handler executes a php-cli call

on the files module.


a. The files module is passed three important vars:

type, path and mode

  By having the type and path vars, it can find the right class and load

  a MySQL entry that has more data on the file system. This is the data 

  that has been stored using the Disk Catalog tool.

  

b. Once the right door class has been found, f.ex.

DOSDrivers/SQLDrive/door.php

  the class is instantiated with the data from the MySQL database table; 

           Filesystem, and the dormant function is called as appropriate:

  

   if( $result = $door->dosAction( $args ) )

   

c. Commands coming in from FriendCore always makes use of the dosAction()

  method in the class.

  

d. The return data from executing a dos action must always start with either

   ok<!--separate-->

  or

   fail<!--separate-->

   

  After this, the output after the separator is in an appropriate JSON format.


All other commands, like WRITE and DELETE all use this same scheme, using 

dosAction() in the door.php class to carry out its directive..



Friendly regards

Hogne Titlestad
Founder and Chief architect
Friend Software Labs

---------------------
2.4. gui.html
This file is for a HTML5 template that displays the input fields of the DOS
driver when edited or added using the Disk Catalog tool. There are some common
input field names, like username, password and server.
You can add custom fields by prefixing the input field with conf.myvar.

2.5. info.html

This file allows you to write an English language instruction to a user that
might double click the DOS driver in the Friend Workspace.
It is a simple information file with version number and notes to the user.
Localized info templates can be added using the format: info_LANG.html.